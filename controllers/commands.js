const raspJson = require('../rasp.json');
const moment = require("moment/moment");
const { dateRaspButton, menuButton } = require('./buttons');
const { getNumberDay, chetOrNoChetWeek, smileFACE } = require('../tools/helpers');
moment.locale("ru")

const start = (ctx) => {
    return ctx.reply(`
        ‚ù§Ô∏è –ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! 
    ‚ùî –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º 
    üñ• –î-–≠ 107, –∫–æ–º–∞–Ω–¥—ã:\n
    /rasp - –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    /help - –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º
    `);
}

const rasp = (command, date = new Date()) => {
    try {
        let dateBack = moment().add(-1, 'days').format('L')
        let dateNext = moment().add(+1, 'days').format('L')
        let dayWeek = moment().format('dddd');
        let chetOrNechet = chetOrNoChetWeek()

        if (command == "–¥–≤–∏–∂–µ–Ω–∏–µ") {
            dateBack = moment(date).add(-1, 'days').format('L')
            dateNext = moment(date).add(+1, 'days').format('L')
            dayWeek = moment(date).format('dddd');
            chetOrNechet = chetOrNoChetWeek(date)
        }

        let dayWeeekNumber = getNumberDay(dayWeek)
        const dataNow = raspJson[dayWeeekNumber][dayWeek]

        let text = ``;
        text += `–ù–µ–¥–µ–ª—è: ${chetOrNechet}, ${moment(date).format('DD.MM.YYYY')}, ${dayWeek}\n`

        for (let i = 0; i < dataNow.length; i++) {
            console.log(dataNow[i])
            if (dataNow[i].length > 1) {

                if (chetOrNechet == '–Ω–µ—á—ë—Ç–Ω–∞—è') {
                    if (dataNow[i][0].length < 2) continue
                    text += `\n${smileFACE(i + 1)}. ${dataNow[i][0]}`
                } else {
                    if (dataNow[i][1].length < 2) continue
                    text += `\n${smileFACE(i + 1)}. ${dataNow[i][1]}`
                }
            } else {
                if (dataNow[i][0].length < 2) continue
                text += `\n${smileFACE(i + 1)}. ${dataNow[i][0]}`
            }
        }

        const isNow = moment(date).isSame(moment(), 'day');
        return {
            text,
            dateBack,
            dateNext,
            isNow
        }

    } catch (error) {
        console.log(error)
    }
}


const raspMessage = (ctx) => {
    try {
        let { text, dateBack, dateNext, isNow } = rasp(ctx)

        ctx.reply(text, {
            ...dateRaspButton({ dateBack, dateNext, isNow })
        });
    } catch (error) {
        console.log(error)
    }
}

const raspMovementMessage = (ctx) => {
    try {
        const dateCallback = ctx.match["input"].split(" ")[1]
        let { text, dateBack, dateNext, isNow } = rasp("–¥–≤–∏–∂–µ–Ω–∏–µ", moment(dateCallback, "DD MM YYYY"))

        ctx.deleteMessage()
        ctx.reply(text, {
            ...dateRaspButton({ dateBack, dateNext, isNow })
        });
    } catch (error) {
        console.log(error)
    }
}

const help = (ctx) => {
    return ctx.reply(`–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è —Å–¥–µ–ª–∞–ª –í–æ–ª–æ–¥—è)\n
–ü—Ä–æ–±–µ–∂–∏–º—Å—è –ø–æ –∫–æ–º–∞–Ω–¥–∞–º: 

/rasp - –ø–æ–∫–∞–∂–µ—Ç —Ç–µ–±–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å, –∫–Ω–æ–ø–∫–∏ ‚¨ÖÔ∏è‚û°Ô∏è –ø–æ–º–æ–≥—É—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ –±—ã–ª–æ –≤—á–µ—Ä–∞ –∏–ª–∏ –±—É–¥–µ—Ç –∑–∞–≤—Ç—Ä–∞
–ï—Å–ª–∏ –ø–æ—è–≤–ª—è–µ—Ç—Å—è ‚ô¶Ô∏è, —Ç–æ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é


`, {
        ...menuButton
    })
}
///calend - –ø–æ–∫–∞–∂–µ—Ç —Ç–µ–±–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π
module.exports = {
    start,
    raspMessage,
    raspMovementMessage,
    help
}