const raspJson = require('../rasp.json');
const moment = require('moment-timezone');
const { dateRaspButton, menuButton } = require('./buttons');
const { getNumberDay, smileFACE, getTimePar } = require('../tools/helpers');
moment.locale("ru");
moment.tz.setDefault('Europe/Moscow');

const start = (ctx) => {
    return ctx.reply(`
        ‚ù§Ô∏è –ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! 
    ‚ùî –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º 
    üñ• –î-–≠ 207, –∫–æ–º–∞–Ω–¥—ã:\n
    /rasp - –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    /help - –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º
    `);
}

const startDate = moment('2024-09-02'); // 2 —Å–µ–Ω—Ç—è–±—Ä—è 2024 –≥–æ–¥–∞

function chetOrNoChetWeek(currentDate) {
    const daysDifference = currentDate.diff(startDate, 'days');
    const weekNumber = Math.floor(daysDifference / 7) + 1; // –î–æ–±–∞–≤–ª—è–µ–º 1, —Ç–∞–∫ –∫–∞–∫ –ø–µ—Ä–≤–∞—è –Ω–µ–¥–µ–ª—è —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–≤–æ–π

    return (weekNumber % 2 === 0) ? '—á—ë—Ç–Ω–∞—è' : '–Ω–µ—á—ë—Ç–Ω–∞—è';
}

function updateDateInfo(date = moment()) {
    const dateBack = date.clone().add(-1, 'days').format('L');
    const dateNext = date.clone().add(+1, 'days').format('L');
    const dayWeek = date.format('dddd');
    const chetOrNechet = chetOrNoChetWeek(date);

    return { dateBack, dateNext, dayWeek, chetOrNechet };
}

const rasp = (command, date) => {
    try {
        let { dateBack, dateNext, dayWeek, chetOrNechet } = updateDateInfo();

        if (command === "–¥–≤–∏–∂–µ–Ω–∏–µ") {
            ({ dateBack, dateNext, dayWeek, chetOrNechet } = updateDateInfo(moment(date)));
        }

        let dayWeeekNumber = getNumberDay(dayWeek);
        const dataNow = raspJson[dayWeeekNumber][dayWeek];

        let text = ``;
        text += `–ù–µ–¥–µ–ª—è: ${chetOrNechet}, ${moment(date).format('DD.MM.YYYY')}, ${dayWeek}\n`;

        for (let i = 0; i < dataNow.length; i++) {
            if (dataNow[i].length > 1) {
                if (chetOrNechet === '–Ω–µ—á—ë—Ç–Ω–∞—è') {
                    if (dataNow[i][0].length < 2) continue;
                    text += `\n\n${smileFACE(i + 1)}. <b>${getTimePar(i + 1)}</b> | <code>${dataNow[i][0]}</code>`;
                } else {
                    if (dataNow[i][1].length < 2) continue;
                    text += `\n\n${smileFACE(i + 1)}. <b>${getTimePar(i + 1)}</b> | <code>${dataNow[i][1]}</code>`;
                }
            } else {
                if (dataNow[i][0].length < 2) {
                    text += `\n\n${smileFACE(i + 1)}. <b>${getTimePar(i + 1)}</b> | <code>–ü–∞—Ä—ã –Ω–µ—Ç. –û–∫–Ω–æ</code>`;
                    continue;
                }
                text += `\n\n${smileFACE(i + 1)}. <b>${getTimePar(i + 1)}</b> | <code>${dataNow[i][0]}</code>`;
            }
        }

        const isNow = moment(date).isSame(moment(), 'day');
        return {
            text,
            dateBack,
            dateNext,
            isNow
        }

    } catch (error) {
        console.log(error);
    }
}

const raspMessage = (ctx, isEdit) => {
    try {
        let { text, dateBack, dateNext, isNow } = rasp(ctx);

        if (isEdit) {
            ctx.editMessageText(text, {
                parse_mode: 'HTML',
                ...dateRaspButton({ dateBack, dateNext, isNow })
            }).catch((error) => console.log(error));
        } else {
            ctx.replyWithHTML(text, {
                ...dateRaspButton({ dateBack, dateNext, isNow })
            });
        }
    } catch (error) {
        console.log(error);
    }
}

const raspMovementMessage = (ctx) => {
    try {
        const dateCallback = ctx.match["input"].split(" ")[1];

        let { text, dateBack, dateNext, isNow } = rasp("–¥–≤–∏–∂–µ–Ω–∏–µ", moment(dateCallback, "DD MM YYYY"));

        ctx.editMessageText(text, {
            parse_mode: 'HTML',
            ...dateRaspButton({ dateBack, dateNext, isNow })
        }).catch((error) => console.log(error));
    } catch (error) {
        console.log(error);
    }
}

const help = (ctx) => {
    return ctx.replyWithHTML(`–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è —Å–¥–µ–ª–∞–ª <a href="https://t.me/atombaytovich">–í–æ–ª–æ–¥—è</a>)\n
–ü—Ä–æ–±–µ–∂–∏–º—Å—è –ø–æ –∫–æ–º–∞–Ω–¥–∞–º: 

/rasp - –ø–æ–∫–∞–∂–µ—Ç —Ç–µ–±–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å, –∫–Ω–æ–ø–∫–∏ ‚¨ÖÔ∏è‚û°Ô∏è –ø–æ–º–æ–≥—É—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ –±—ã–ª–æ –≤—á–µ—Ä–∞ –∏–ª–∏ –±—É–¥–µ—Ç –∑–∞–≤—Ç—Ä–∞
–ï—Å–ª–∏ –ø–æ—è–≤–ª—è–µ—Ç—Å—è ‚ô¶Ô∏è, —Ç–æ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é

–°–ø–∞—Å–∏–±–æ <a href="https://t.me/s0ft1">–ì–ª–µ–±–∞—Å—É</a>! –í–º–µ—Å—Ç–µ –æ–ø–ª–∞—á–∏–≤–∞–µ–º —Å–µ—Ä–≤–∞–∫ ‚ù§Ô∏è 

`, {
        ...menuButton,
        disable_web_page_preview: true
    });
}

///calend - –ø–æ–∫–∞–∂–µ—Ç —Ç–µ–±–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π
module.exports = {
    start,
    raspMessage,
    raspMovementMessage,
    help
}
